/*
 * origin code by tsutoringo
 * * https://tsutori.ngo/ or https://github.com/tsutoringo
 * Usage rights are granted by the author.
 */
@keyframes kurukuru {
    0% {transform:rotateX(0turn) rotateY(0turn) rotateZ(0turn);}
    100% {transform:rotateX(1turn) rotateY(2turn) rotateZ(1turn)}
}

#minecraft-skin {
    width: 100px;
    height: 100px;
    perspective: none;
    transform-style: preserve-3d;
    animation-name: kurukuru;
    /* 	animation-duration: 1s; */
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    transform: rotateY(30deg) rotateX(30deg) rotateZ(0deg);
}

.accessories {
    width: 0;
    height: 0;
    transform: scaleX(1.1) scaleY(1.1) scaleZ(1.1);
    transform-style: preserve-3d;
}

.cube {
    position: relative;
    transform-style: preserve-3d;
    background-color: #00000000;
    display: flex;
    justify-content: center;
    align-items: center;
    --size: 50;
}

.cube > * {
    position: absolute;
    width: 100%;
    height: 100%;
    image-rendering: pixelated;
    background-image: var(--skin-image);
    background-color: pink;
    background-size: calc(8px * var(--size));
}

.head {
    --size-x: calc(1px * var(--size));
    --size-y: calc(1px * var(--size));
    --size-z: calc(1px * var(--size));
}

.body {
    transform: translateY(calc(1.25px * var(--size)));
    --size-x: calc(1px * var(--size));
    --size-y: calc(1.5px * var(--size));
    --size-z: calc(0.5px * var(--size));
}
.arm.right,
.arm.left,
.legs.left,
.legs.right {
    --size-x: calc(0.5px * var(--size));
    --size-y: calc(1.5px * var(--size));
    --size-z: calc(0.5px * var(--size));
}
.arm.right {
    transform:
            translateY(calc(1.25px * var(--size)))
            translateX(calc(-0.75px * var(--size)));
}
.arm.left {
    transform:
            translateY(calc(1.25px * var(--size)))
            translateX(calc(0.75px * var(--size)));
}
.legs.left {
    transform:
            translateY(calc(2.75px * var(--size)))
            translateX(calc(0.25px * var(--size)));
}
.legs.right {
    transform:
            translateY(calc(2.75px * var(--size)))
            translateX(calc(-0.25px * var(--size)));
}

.cube.head .front {
    background-position:
            calc(calc(1px * var(--size)) * -1)
            calc(calc(1px * var(--size)) * -1);
}
.cube.head .right {
    background-position:
            calc(calc(1px * var(--size)) * -2)
            calc(calc(1px * var(--size)) * -1);
}
.cube.head .left {
    background-position:
            calc(calc(1px * var(--size)) * 0)
            calc(calc(1px * var(--size)) * -1);
}
.cube.head .back {
    background-position:
            calc(calc(1px * var(--size)) * -3)
            calc(calc(1px * var(--size)) * -1);
}
.cube.head .top {
    background-position:
            calc(calc(1px * var(--size)) * -1)
            calc(calc(1px * var(--size)) * 0);
}
.cube.head .bottom {
    background-position:
            calc(calc(1px * var(--size)) * -2)
            calc(calc(1px * var(--size)) * 0);
}
.cube.head .accessories .front {
    background-position:
            calc(calc(1px * var(--size)) * -1)
            calc(calc(1px * var(--size)) * -1); /* FIXME */
}

.cube.body .front {
    background-position:
            calc(calc(1px * var(--size)) * -2.5)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.body .right {
    background-position:
            calc(calc(1px * var(--size)) * -3.5)
            calc(calc(1px * var(--size)) * -2.5)
}
.cube.body .left {
    background-position:
            calc(calc(1px * var(--size)) * -2)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.body .back {
    background-position:
            calc(calc(1px * var(--size)) * -4)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.body .top {
    background-position:
            calc(calc(1px * var(--size)) * -2.5)
            calc(calc(1px * var(--size)) * -2);
}
.cube.body .bottom {
    background-position:
            calc(calc(1px * var(--size)) * -3.5)
            calc(calc(1px * var(--size)) * -2);
}

/* Arm-left */
.cube.arm.left .front {
    background-position:
            calc(calc(1px * var(--size)) * -4.5)
            calc(calc(1px * var(--size)) * -6.5);
}
.cube.arm.left .right {
    background-position:
            calc(calc(1px * var(--size)) * -5)
            calc(calc(1px * var(--size)) * -6.5)
}
.cube.arm.left .left {
    background-position:
            calc(calc(1px * var(--size)) * -4)
            calc(calc(1px * var(--size)) * -6.5);
}
.cube.arm.left .back {
    background-position:
            calc(calc(1px * var(--size)) * -5.5)
            calc(calc(1px * var(--size)) * -6.5);
}
.cube.arm.left .top {
    background-position:
            calc(calc(1px * var(--size)) * -4.5)
            calc(calc(1px * var(--size)) * -6);
}
.cube.arm.left .bottom {
    background-position:
            calc(calc(1px * var(--size)) * -5)
            calc(calc(1px * var(--size)) * -6);
}

/* Arm-right */
.cube.arm.right .front {
    background-position:
            calc(calc(1px * var(--size)) * -5.5)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.arm.right .right {
    background-position:
            calc(calc(1px * var(--size)) * -6)
            calc(calc(1px * var(--size)) * -2.5)
}
.cube.arm.right .left {
    background-position:
            calc(calc(1px * var(--size)) * -5)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.arm.right .back {
    background-position:
            calc(calc(1px * var(--size)) * -6.5)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.arm.right .top {
    background-position:
            calc(calc(1px * var(--size)) * -5.5)
            calc(calc(1px * var(--size)) * -2);
}
.cube.arm.right .bottom {
    background-position:
            calc(calc(1px * var(--size)) * -6)
            calc(calc(1px * var(--size)) * -2);
}
/* legs-right */
.cube.legs.right .front {
    background-position:
            calc(calc(1px * var(--size)) * -0.5)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.legs.right .right {
    background-position:
            calc(calc(1px * var(--size)) * -1)
            calc(calc(1px * var(--size)) * -2.5)
}
.cube.legs.right .left {
    background-position:
            calc(calc(1px * var(--size)) * 0)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.legs.right .back {
    background-position:
            calc(calc(1px * var(--size)) * -1.5)
            calc(calc(1px * var(--size)) * -2.5);
}
.cube.legs.right .top {
    background-position:
            calc(calc(1px * var(--size)) * -0.5)
            calc(calc(1px * var(--size)) * -2);
}
.cube.legs.right .bottom {
    background-position:
            calc(calc(1px * var(--size)) * -1)
            calc(calc(1px * var(--size)) * -2);
}
/* legs-left */
.cube.legs.left .front {
    background-position:
            calc(calc(1px * var(--size)) * -2.5)
            calc(calc(1px * var(--size)) * -6.5);
}
.cube.legs.left .right {
    background-position:
            calc(calc(1px * var(--size)) * -3)
            calc(calc(1px * var(--size)) * -6.5)
}
.cube.legs.left .left {
    background-position:
            calc(calc(1px * var(--size)) * -2)
            calc(calc(1px * var(--size)) * -6.5);
}
.cube.legs.left .back {
    background-position:
            calc(calc(1px * var(--size)) * -3.5)
            calc(calc(1px * var(--size)) * -6.5);
}
.cube.legs.left .top {
    background-position:
            calc(calc(1px * var(--size)) * -2.5)
            calc(calc(1px * var(--size)) * -6);
}
.cube.legs.left .bottom {
    background-position:
            calc(calc(1px * var(--size)) * -3)
            calc(calc(1px * var(--size)) * -6);
}

/* Cubes */
.cube .top {
    width: var(--size-x);
    height: var(--size-z);
    transform: rotateX( 90deg) translateZ(calc(var(--size-y) / 2));
}

.cube .bottom {
    width: var(--size-x);
    height: var(--size-z);
    transform: rotateX(-90deg) translateZ(calc(var(--size-y) / 2));
}

.cube.body .bottom,
.cube.head .bottom {
    transform: rotateX(-90deg) rotateZ(180deg) translateZ(calc(var(--size-y) / 2));
}

.cube .left {
    height: var(--size-y);
    width: var(--size-z);
    transform: rotateY(-90deg) translateZ(calc(var(--size-x) / 2));
}
.cube .right {
    height: var(--size-y);
    width: var(--size-z);
    transform: rotateY( 90deg) translateZ(calc(var(--size-x) / 2));
}
.cube .back {
    height: var(--size-y);
    width: var(--size-x);
    transform: rotateY(180deg) translateZ(calc(var(--size-z) / 2));
}
.cube .front {
    height: var(--size-y);
    width: var(--size-x);
    transform: rotateY(  0deg) translateZ(calc(var(--size-z) / 2));
}
